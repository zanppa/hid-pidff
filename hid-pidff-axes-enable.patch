hid-pidff: Make conditional effects use condition blocks instead of direction.

If axes enable fields are found in the descriptor, condition effects will
enable maximum of 2 first axes and clear the direction enable bit. This makes
the device map 2 provided condition blocks to X and Y axis, instead of mapping
first one to the given direction.

According to HID PID documentation, condition effects may be applied by
1. using direction field and its enable bit, in which case only 1st condition
block is used and mapped to the respective direction, or
2. clearing direction enable bit and having one condition block for each
active axis. In this case the active axes are enabled with their enable axes
fields.

Since there is no direction enable bit in Linux ff api, nor can the driver know
how many condition blocks are defined, a common consensus seems to be that
condition effects do not use direction field but rather one condition per axis,
i.e. using the method 2 above. E.g. SDL2 uses this.

Current hid-pidff implementation always enables direction bit and sets the
direction, and as a result only one condition block was used and mapped to
the respective direction.

Signed-off-by: Lauri Peltonen
--- drivers/hid/usbhid/hid-pidff.c.orig	2020-01-17 20:30:44.000000000 +0200
+++ drivers/hid/usbhid/hid-pidff.c	2020-01-17 21:13:16.915591179 +0200
@@ -180,6 +180,7 @@ struct pidff_device {
 	/* Special fields in set_effect */
 	struct hid_field *set_effect_type;
 	struct hid_field *effect_direction;
+	struct hid_field *axes_enable;
 
 	/* Special field in device_control */
 	struct hid_field *device_control;
@@ -309,6 +310,8 @@ static int pidff_needs_set_constant(stru
 static void pidff_set_effect_report(struct pidff_device *pidff,
 				    struct ff_effect *effect)
 {
+	int i;
+
 	pidff->set_effect[PID_EFFECT_BLOCK_INDEX].value[0] =
 		pidff->block_load[PID_EFFECT_BLOCK_INDEX].value[0];
 	pidff->set_effect_type->value[0] =
@@ -319,10 +322,22 @@ static void pidff_set_effect_report(stru
 		effect->trigger.interval;
 	pidff->set_effect[PID_GAIN].value[0] =
 		pidff->set_effect[PID_GAIN].field->logical_maximum;
-	pidff->set_effect[PID_DIRECTION_ENABLE].value[0] = 1;
-	pidff->effect_direction->value[0] =
-		pidff_rescale(effect->direction, 0xffff,
-				pidff->effect_direction);
+
+	if ((effect->type == FF_SPRING || effect->type == FF_DAMPER ||
+		effect->type == FF_FRICTION || effect->type == FF_INERTIA) &&
+		pidff->axes_enable) {
+		pidff->set_effect[PID_DIRECTION_ENABLE].value[0] = 0;
+
+		for (i = 0; i < pidff->axes_enable->report_count && i < 2; i++) {
+			pidff->axes_enable->value[i] = 1;
+		}
+	} else {
+		pidff->set_effect[PID_DIRECTION_ENABLE].value[0] = 1;
+		pidff->effect_direction->value[0] =
+			pidff_rescale(effect->direction, 0xffff,
+					pidff->effect_direction);
+	}
+
 	pidff->set_effect[PID_START_DELAY].value[0] = effect->replay.delay;
 
 	hid_hw_request(pidff->hid, pidff->reports[PID_SET_EFFECT],
@@ -942,6 +957,9 @@ static int pidff_find_special_fields(str
 	pidff->effect_direction =
 		pidff_find_special_field(pidff->reports[PID_SET_EFFECT],
 					 0x57, 0);
+	pidff->axes_enable =
+		pidff_find_special_field(pidff->reports[PID_SET_EFFECT],
+					0x55, 0);
 	pidff->device_control =
 		pidff_find_special_field(pidff->reports[PID_DEVICE_CONTROL],
 					 0x96, 1);
@@ -979,6 +997,10 @@ static int pidff_find_special_fields(str
 		return -1;
 	}
 
+	if (!pidff->axes_enable) {
+		hid_warn(pidff->hid, "axes enable field not found\n");
+	}
+
 	pidff_find_special_keys(pidff->control_id, pidff->device_control,
 				pidff_device_control,
 				sizeof(pidff_device_control));
